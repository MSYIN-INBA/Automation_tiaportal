FUNCTION_BLOCK "CreateDataPair"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      E_Factor : Real := 50.0;
      E_TimeConstant : Real := 20.0;
      E_OffsetY : Real;
      P_Form : Real := -0.1;
      P_OffsetX : Real := 50.0;
      P_OffsetY : Real := 50.0;
      S_Length : Real := 50.0;
      S_Amplitude : Real := 25.0;
      S_OffsetX : Real;
      S_OffsetY : Real := 25.0;
   END_VAR

   VAR_IN_OUT 
      TriggerFunction : Int;
   END_VAR

   VAR 
      statIndex { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Int;
      statExponent { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      statX : Array[0..99] of Real;
      statY : Array[0..99] of Real;
   END_VAR


BEGIN
	IF #TriggerFunction > 0 THEN
	  
	  FOR #statIndex := 0 TO 99 BY 1 DO
	    
	    CASE #TriggerFunction OF
	        
	      1:  // exponential function
	
	        #statExponent := -1 * (#statIndex / #E_TimeConstant);
	        #statX[#statIndex] := INT_TO_REAL(#statIndex);
	        #statY[#statIndex] := #E_Factor * (1 - EXP(#statExponent)) + #E_OffsetY;
	        
	      2:  // parable function
	        #statX[#statIndex] := INT_TO_REAL(#statIndex);
	        #statY[#statIndex] := #P_Form * SQR(#statX[#statIndex] - #P_OffsetX) + #P_OffsetY;
	        
	      3:  // sinus function
	        #statX[#statIndex] := INT_TO_REAL(#statIndex);
	        #statY[#statIndex] := #S_Amplitude * SIN((#statX[#statIndex] - #S_OffsetX) * 6.28 / (#S_Length)) + #S_OffsetY;
	        
	    END_CASE;
	    
	  END_FOR;
	  
	  #TriggerFunction := 0;
	
	END_IF;
END_FUNCTION_BLOCK

